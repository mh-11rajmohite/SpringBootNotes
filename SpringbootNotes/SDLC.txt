DevOps (development + operations) is the combination of practices and tools that are designed to deliver applications and services efficiently.

DevOps is a software development approach that emphasizes collaboration and communication between development (Dev) and operations (Ops) teams.

It helps to improve the products at a faster speed than using traditional software development and infrastructure management processes.

DevOps aims to improve the software development life-cycle and increases an organization’s ability to deliver services and applications at high speed. 


DevOps Tools:- Jenkins,Docker,Kubernetes,Terraform

Benifits : 
- Faster Delivery
- Improved Collaboration
- Improved Quality
- Increased Automation
- Scalability
 



SDLC : 
	-Software development life cycle (SDLC) is a structured process that is used to design, develop, and test good-quality software. 
	-The goal of the SDLC life cycle model is to deliver high-quality, maintainable software that meets the user’s requirements.

Planning (Define Project Scope, Set Objective and Goals, Resource Planning)
Defining (Functional Requirement, Technical requirement, Requirement review)
Design (Low Level Design , High Level Design)
Development (Coding Standards, Scalable Codes, Version Control)
Testing (System Testing ,Manual Testing, Automated Testing)
Deployment (Deployment and Maintenance, Feedback)


Models:
1. Waterfall Model - The waterfall model is a software development model used in the context of large, complex projects, typically in the field of information technology.
		   - It is characterized by a structured, sequential approach to project management and software development.
		   -  It is a linear and sequential approach to software development that consists of several phases that must be completed in a specific order.
		   - Requirement, Design, Development, Testing, Deployment, Maintenance	

2. Agile Model     - Agile Software Development Methodology is a project management approach that allows successful and efficient execution of the project 
		     while emphasizing the improvement of a project and team collaboration.
		   - The approach is applicable in software development for flexibility, customer satisfaction, and collaboration.
		   - Popular Framework : Scrum, Kanban ,Extreme Programming

3. Spring Model    - The Spiral model combines the idea of iterative development with the systematic aspects of the Waterfall model.
		   - It is based on the concept of a spiral, with each loop representing a phase in the software development process. 
                   - The model is inherently risk-driven, meaning that risks are continuously assessed and addressed throughout the development life cycle.
4. V- shaped Model
5. Iterative Model




* Challenges in Manual Deployment Process:
-Everyday we need to deploy latest code
-Deploy code in multiple environments
-Takes lot of time
-Repeated work
-Error Prone




CI/CD : 
- Continuous Integration and Continuous Delivery (CI/CD) is modern-day practices to continuously improve the software by adding 
new feature and for that we have to change the existing files and deploy them. Doing it manually every time may consume a lot of developer’s time, 
so to make the process more simple and reliable developers use CI/CD tools that are much more efficient and make the whole process automated. 

CI/CD Tools : 
-Jenkins
-Travis CI
-Git Lab
-Docker
-Bamboo



Continuous Integration : 
- There could be scenarios when developers in a team, work in isolation for an extended period and only merge their changes to the master branch once their work is completed.
- This not only makes the merging of code very difficult, prone to conflicts, and time-consuming but also results in bugs accumulating for a long time which are only identified in later stages of development.
- These factors make it harder to deliver updates to customers quickly.

- With Continuous Integration, developers frequently commit to a shared common repository using a version control system such as Git.
- A continuous integration pipeline can automatically run builds, store the artifacts, run unit tests, and even conduct code reviews using tools like Sonar.
- We can configure the CI pipeline to be triggered every time there is a commit/merge in the codebase.



Continuous Delivery : 
- Continuous delivery helps developers test their code in a production-similar environment, hence preventing any last-moment or post-production surprises. 
- These tests may include UI testing, load testing, integration testing, etc.
- It helps developers discover and resolve bugs preemptively.
- By automating the software release process, CD contributes to low-risk releases, lower costs, better software quality,
 improved productivity levels, and most importantly, it helps us deliver updates to customers faster and more frequently. 
- If Continuous Delivery is implemented properly, we will always have a deployment-ready code that has passed through a standardized test process.

Continuous Deployment :
- The final stage of CI and CD will be continuous deployment. It’s an extension of continuous delivery, which automate the proper code to the code 
repository, continuous deployment will automate the related app for production purpose because there is not having any manual gate at the stage of the pipeline before production, 
continuous deployment relies on high automation.
- in simple language, it is a change of application that goes through the cloud which is carried by the developer and it will live within a few minutes of writing pass with the automated testing.

Jenkins :
-It is a free and open source software 
-It is developed using java language
-It is use to automate build and deployment process
-Using Jenkins we can implement CI/CD


Stages in CI/CD : 
- Team of developers will push their code to git repository daily.
- Jenkins is responsible for creation of pipeline. Pipeline is a virtual connection between the source(Git Hub) and destination(Docker Container).
  It is used to automate the build and deployment process of any project. With the help of git url the code is fetched and build is performed using
  Maven. Maven is build tool, specifically used for Java Projects. After the build is completed, jar or war file of the project is created.
- This file is then given to Docker to create Docker images.
- After the creation of docker images, they are deployed on Docker container.

Script for pipeline in Jinkins:

pipeline{

	agent any // any slave machine available
	
	stages{
	
		stage('git clone'){
			
			steps{
				git 'url'
			}
		}
		stage('mvn build'){
			
			steps{
				sh 'mvn clean package'
			}
		}
		stage('docker image'){
			
			steps{
				
				sh 'docker build -t imgName .'
			}
		}
		stage('deployment'){
			
			steps{
				
				sh 'docker run -d -p 9090:8080 imgName'
			}
		}

	}


}







Microservices: 
-Microservices are an architectural approach for developing software applications as a collection of small, independent services that communicate with each other over a network.
- Instead of building a monolithic application where all the functionality is tightly integrated into a single codebase, microservices break down the application into smaller, loosely coupled services.
- Each microservice is designed to perform a specific business function and can be developed, deployed, and scaled independently. 
-It allows you to take a large application and decompose or break it into easily manageable small components with narrowly defined responsibilities.
-Microservices can be written in a variety of programming languages, and frameworks, and each service acts as a mini-application on its own.

Benefits : Scalability, ease of maintenance, technology flexibility, and improved fault isolation.


How do Microservices work:
Modular Structure:
	Microservices architecture breaks down large, monolithic applications into smaller, independent services.
	Each service is a self-contained module with a specific business capability or function.
	This modular structure promotes flexibility, ease of development, and simplified maintenance.

Independent Functions:
	Each microservice is designed to handle a specific business function or feature.
	For example, one service may manage user authentication, while another handles product catalog functions.
	This independence allows for specialized development and maintenance of each service.

Communication:
	Microservices communicate with each other through well-defined Application Programming Interfaces (APIs).
	APIs serve as the interfaces through which services exchange information and requests.
	This standardized communication enables interoperability and flexibility in integrating services.


Flexibility:
	Microservices architecture supports the use of diverse technologies for each service.
	This means that different programming languages, frameworks, and databases can be chosen based on the specific requirements of each microservice.
	Teams have the flexibility to use the best tools for their respective functions.


Independence and Updates:
	Microservices operate independently, allowing for updates or modifications to one service without affecting the entire system.
	This decoupling of services reduces the risk of system-wide disruptions during updates, making it easier to implement changes and improvements.
	Also Microservices contribute to system resilience by ensuring that if one service encounters issues or failures, it does not bring down the entire system.

Scalability:
	Microservices offer scalability by allowing the addition of instances of specific services.
	If a particular function requires more resources, additional instances of that microservice can be deployed to handle increased demand.
	This scalability is crucial for adapting to varying workloads.

Continuous Improvement:
	The modular nature of microservices facilitates continuous improvement.
	Development teams can independently work on and release updates for their respective services.
	This agility enables the system to evolve rapidly and respond to changing requirements or user needs.


Tools like Docker, Kubernetes, Netflix OSS, and Spring Boot are commonly used for developing and managing microservices.





Docker :
	-Docker is an open-source containerization platform by which you can pack your application and all its dependencies into a standardized unit called a container. 
	Containers are light in weight which makes them portable and they are isolated from the underlying infrastructure and from each other container.
	You can run the docker image as a docker container in any machine where docker is installed without depending on the operating system.


Features : 
	1. Portability: Docker facilitates the developers in packaging their applications with all dependencies into a single lightweight containers. 
			It facilities in ensuring the consistent performance across the different computing environments.
	2. Reproducibility: Through encapsulating the applications with their dependencies within a container it ensures in software setups remaining consistent across the development,
			 testing and production environments.
	3. Efficiency: Docker through its container based architecture it optimizes the resource utilization.
			It allows the developers to run the multiple isolated applications on a single host system.
	4. Scalability: Docker’s scalability features facilitated the developers in making easier of their applications handling at time of workloads increment.






Docker File:
	- The Dockerfile uses DSL (Domain Specific Language) and contains instructions for generating a Docker image. 
	- Dockerfile will define the processes to quickly produce an image.
	- While creating your application, you should create a Dockerfile in order since the Docker daemon runs all of the instructions from top to bottom.
	- It is a text document that contains necessary commands which on execution help assemble a Docker Image.
	- Docker image is created using a Dockerfile.



















